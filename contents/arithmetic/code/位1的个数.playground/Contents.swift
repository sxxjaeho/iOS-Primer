import UIKit


/*
 题目：编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 
 输入：00000000000000000000000000001011
 输出：3
 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

 时间复杂度：O(1) 空间复杂度：O(1)
 */


func hammingWeight(_ n: UInt32) -> Int {
    var n = n
    var res = 0
    for _ in 0..<32 {
        if n & 1 == 1 {
            res += 1
        }
        n = n >> 1
    }
    return res
}

func hammingWeight1(_ n: UInt32) -> Int {
    var n = n
    var res = 0
    while n != 0 {
        res += 1
        // 清零最低位的1
        n = n & (n - 1)
    }
    return res
}

print(hammingWeight(0b00000000000000000000000000001011))

/*
 实战常用的位运算操作
 
 x & 1 == 1                      =>     判断奇偶 等价于(x % 2 == 1)
 x = x & (x - 1)                 =>     清零最低位的1
 x & - x                         =>     得到最低位的1
 
 x & (~0 << n)                   =>     把x最右边的n位清零
 (x >> n) & 1                    =>     获取x的第n位值(0或者1)
 x & (1 << (n - 1))              =>     获取x的第n位的幂值
 x | (1 << n)                    =>     仅将第n位置为1
 x & (~(1 << n))                 =>     仅将第n位置为0
 x & ((1 << n) - 1)              =>     将x最高位至第n位(含)清零
 x & (~((1 << (n + 1)) - 1))     =>     将第n位至第0位(含)清零
 
 */
